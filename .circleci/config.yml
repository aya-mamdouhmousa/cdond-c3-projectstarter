version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
    notify_on_failure:
        steps:
        - slack/notify:
            event: fail
            channel: cicd-pipeline
            template: basic_fail_1

    install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

    install_ansible:
      description: Install Ansible
      steps:
        - run:
            name: Install Ansible
            command: |
              python3 -m pip install --user ansible         
    
    destroy_environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              # Empty frontend bucket
              aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

              # Delete frontend stack
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

              # Delete backend stack
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - frontend-deps-{{ checksum "frontend/package-lock.json" }}

      - run: 
          name: Install dependencies
          command: |
              cd frontend
              npm install     
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - backend-deps-{{ checksum "backend/package-lock.json" }}

      - run: 
          name: Install dependencies
          command: |
              cd backend
              npm install   
      - run:
          name: Back-end build
          command: |
             cd backend
             npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps-{{ checksum "backend/package-lock.json" }}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - frontend-deps-{{ checksum "frontend/package-lock.json" }}

      - run: 
          name: Install dependencies
          command: |
              cd frontend
              npm install     

      - run:
          name: Run frontend unit tests
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - backend-deps-{{ checksum "backend/package-lock.json" }}

      - run: 
          name: Install dependencies
          command: |
              cd backend
              npm install   
      - run:
          name: Run backend unit tests
          command: |
             cd backend
             npm run test

            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - frontend-deps-{{ checksum "frontend/package-lock.json" }}

      - run: 
          name: Install dependencies
          command: |
              cd frontend
              npm install     
      - run:
          name: scan front-end packages
          command: |
            cd frontend
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

      #- notify_on_failure 

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - backend-deps-{{ checksum "backend/package-lock.json" }}

      - run: 
          name: Install dependencies
          command: |
              cd backend
              npm install     
      - run:
          name: scan back-end packages
          command: |
            cd backend
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment   

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure: 
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]         